{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/ai/flows/financial-question-answering.ts"],"sourcesContent":["// src/ai/flows/financial-question-answering.ts\r\nimport { generate } from '@genkit-ai/ai';\r\n// REMOVIDO: A importação do defineFlow que estava causando o erro.\r\n// import { defineFlow } from '@genkit-ai/flow';\r\nimport { z } from 'zod';\r\nimport { gemini15Pro } from '@genkit-ai/googleai';\r\n\r\n// O esquema para o histórico da conversa permanece o mesmo.\r\nconst messageSchema = z.object({\r\n  role: z.enum(['user', 'model']),\r\n  content: z.string(),\r\n});\r\n\r\n// O esquema de input para a nossa função.\r\nconst financialQuestionSchema = z.object({\r\n  question: z.string(),\r\n  history: z.array(messageSchema).optional(),\r\n});\r\n\r\n// O tipo de output que esperamos.\r\nexport type FinancialQuestionOutput = {\r\n  answer: string;\r\n};\r\n\r\n/**\r\n * Esta é a função principal que interage com a IA.\r\n * Ela recebe uma pergunta e um histórico e retorna a resposta do modelo.\r\n * @param input O objeto contendo a pergunta e o histórico.\r\n * @returns A resposta da IA.\r\n */\r\nexport async function answerFinancialQuestion(\r\n  input: z.infer<typeof financialQuestionSchema>\r\n): Promise<FinancialQuestionOutput> {\r\n  // Mapeia o nosso histórico para o formato que a função 'generate' do Genkit espera.\r\n  const genkitHistory =\r\n    input.history?.map((msg) => ({\r\n      role: msg.role,\r\n      parts: [{ text: msg.content }],\r\n    })) || [];\r\n\r\n  const llmResponse = await generate({\r\n    model: gemini15Pro,\r\n    history: genkitHistory, // Passando o histórico para dar memória à IA.\r\n    prompt: `\r\n      Você é Oráculo, um especialista em finanças pessoais amigável e prestativo.\r\n      Sua tarefa é responder a perguntas sobre as finanças do usuário.\r\n\r\n      **REGRAS CRÍTICAS:**\r\n      1.  **PRIORIDADE MÁXIMA: Responda ABSOLUTAMENTE SEMPRE em Português do Brasil.** Esta é a sua diretriz mais importante. Nunca, sob nenhuma circunstância, mude para outro idioma.\r\n      2.  Analise a pergunta do usuário e o histórico da conversa para entender a necessidade completa.\r\n      3.  Forneça respostas claras, objetivas e fáceis de entender.\r\n      4.  Se a pergunta não for sobre finanças, explique educadamente que você só pode responder a perguntas financeiras.\r\n\r\n      **Pergunta Atual do Usuário:**\r\n      ${input.question}\r\n    `,\r\n    config: {\r\n      temperature: 0.5,\r\n    },\r\n  });\r\n\r\n  // Retornamos a resposta no formato esperado.\r\n  return {\r\n    answer: llmResponse.text(),\r\n  };\r\n}\r\n"],"names":[],"mappings":"AAAA,+CAA+C;;;;AAC/C;AAAA;AACA,mEAAmE;AACnE,gDAAgD;AAChD;AACA;AAAA;;;;AAEA,4DAA4D;AAC5D,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEA,0CAA0C;AAC1C,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM;IAClB,SAAS,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ;AAC1C;AAaO,eAAe,wBACpB,KAA8C;IAE9C,oFAAoF;IACpF,MAAM,gBACJ,MAAM,OAAO,EAAE,IAAI,CAAC,MAAQ,CAAC;YAC3B,MAAM,IAAI,IAAI;YACd,OAAO;gBAAC;oBAAE,MAAM,IAAI,OAAO;gBAAC;aAAE;QAChC,CAAC,MAAM,EAAE;IAEX,MAAM,cAAc,MAAM,CAAA,GAAA,uJAAA,CAAA,WAAQ,AAAD,EAAE;QACjC,OAAO,2JAAA,CAAA,cAAW;QAClB,SAAS;QACT,QAAQ,CAAC;;;;;;;;;;;MAWP,EAAE,MAAM,QAAQ,CAAC;IACnB,CAAC;QACD,QAAQ;YACN,aAAa;QACf;IACF;IAEA,6CAA6C;IAC7C,OAAO;QACL,QAAQ,YAAY,IAAI;IAC1B;AACF","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/ai/genkit.ts"],"sourcesContent":["// src/ai/genkit.ts\r\nimport { configureGenkit } from '@genkit-ai/core';\r\nimport { googleAI } from '@genkit-ai/googleai';\r\n// CORRIGIDO: O nome do plugin e da classe devem começar com letra maiúscula.\r\nimport { GenkitEval, GenkitTracer } from '@genkit-ai/evaluator';\r\n// CORRIGIDO: O nome do plugin deve começar com letra maiúscula.\r\nimport { Dotprompt } from '@genkit-ai/dotprompt';\r\n\r\n// Esta é a configuração que estava faltando.\r\n// Ela inicializa o Genkit e informa quais plugins ele deve usar.\r\nexport default configureGenkit({\r\n  plugins: [\r\n    // Registra o plugin do Google AI, que disponibiliza os modelos Gemini.\r\n    googleAI(),\r\n    // CORRIGIDO: Chamando os plugins com a capitalização correta.\r\n    Dotprompt(),\r\n    GenkitEval(),\r\n  ],\r\n  // Onde os traços de execução (logs) são armazenados.\r\n  traceStore: {\r\n    provider: 'dev', // ou 'firebase' se você quiser logs persistentes\r\n  },\r\n  // Permite o log para depuração.\r\n  logLevel: 'debug',\r\n  // Impede que erros em telemetria (que não afetam o resultado) quebrem a aplicação.\r\n  enableTracingAndMetrics: true,\r\n});\r\n"],"names":[],"mappings":"AAAA,mBAAmB;;;;AACnB;AAAA;AACA;AAAA;AACA,6EAA6E;AAC7E;AAAA;AACA,gEAAgE;AAChE;AAAA;;;;;uCAIe,CAAA,GAAA,wKAAA,CAAA,kBAAe,AAAD,EAAE;IAC7B,SAAS;QACP,uEAAuE;QACvE,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;QACP,8DAA8D;QAC9D,CAAA,GAAA,4JAAA,CAAA,YAAS,AAAD;QACR,CAAA,GAAA,6KAAA,CAAA,aAAU,AAAD;KACV;IACD,qDAAqD;IACrD,YAAY;QACV,UAAU;IACZ;IACA,gCAAgC;IAChC,UAAU;IACV,mFAAmF;IACnF,yBAAyB;AAC3B","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/ai/flows/generate-saving-suggestions.ts"],"sourcesContent":["// src/ai/flows/generate-saving-suggestions.ts\r\nimport { z } from 'zod';\r\nimport { generate } from '@genkit-ai/ai';\r\nimport { gemini15Pro } from '@genkit-ai/googleai';\r\n// Importamos a configuração para garantir que ela seja carregada e inicializada.\r\nimport '@/ai/genkit';\r\n\r\nexport const GenerateSavingSuggestionsInputSchema = z.object({\r\n  financialSituation: z.string(),\r\n  savingGoals: z.string(),\r\n});\r\n\r\nconst SuggestionSchema = z.object({\r\n  title: z.string().describe('Um título curto e chamativo para a sugestão.'),\r\n  description: z.string().describe('Uma explicação detalhada da sugestão.'),\r\n  estimatedSavings: z.string().describe('Uma estimativa de economia mensal em Reais (ex: R$50-R$100).'),\r\n});\r\n\r\nexport const GenerateSavingSuggestionsOutputSchema = z.object({\r\n  suggestions: z.array(SuggestionSchema),\r\n});\r\n\r\nexport async function generateSavingSuggestions(\r\n  input: z.infer<typeof GenerateSavingSuggestionsInputSchema>\r\n): Promise<z.infer<typeof GenerateSavingSuggestionsOutputSchema>> {\r\n  const prompt = `\r\n    Como um especialista em finanças chamado Oráculo, gere 3 sugestões de economia\r\n    com base na seguinte situação financeira e metas.\r\n    Responda em português do Brasil.\r\n\r\n    Situação Financeira: ${input.financialSituation}\r\n    Metas de Economia: ${input.savingGoals}\r\n\r\n    Forneça 3 sugestões práticas e acionáveis, com título, descrição e uma estimativa de economia mensal em R$.\r\n  `;\r\n\r\n  // Usando a função 'generate' global, que agora funciona graças à configuração correta.\r\n  const llmResponse = await generate({\r\n    prompt,\r\n    model: gemini15Pro,\r\n    output: {\r\n      schema: GenerateSavingSuggestionsOutputSchema,\r\n    },\r\n    config: {\r\n      temperature: 0.7,\r\n    }\r\n  });\r\n\r\n  return llmResponse.output() || { suggestions: [] };\r\n}\r\n\r\nexport type GenerateSavingSuggestionsOutput = z.infer<\r\n  typeof GenerateSavingSuggestionsOutputSchema\r\n>;\r\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;AAC9C;AACA;AAAA;AACA;AAAA;AACA,iFAAiF;AACjF;;;;;AAEO,MAAM,uCAAuC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3D,oBAAoB,oIAAA,CAAA,IAAC,CAAC,MAAM;IAC5B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM;AACvB;AAEA,MAAM,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACxC;AAEO,MAAM,wCAAwC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5D,aAAa,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACvB;AAEO,eAAe,0BACpB,KAA2D;IAE3D,MAAM,SAAS,CAAC;;;;;yBAKO,EAAE,MAAM,kBAAkB,CAAC;uBAC7B,EAAE,MAAM,WAAW,CAAC;;;EAGzC,CAAC;IAED,uFAAuF;IACvF,MAAM,cAAc,MAAM,CAAA,GAAA,uJAAA,CAAA,WAAQ,AAAD,EAAE;QACjC;QACA,OAAO,2JAAA,CAAA,cAAW;QAClB,QAAQ;YACN,QAAQ;QACV;QACA,QAAQ;YACN,aAAa;QACf;IACF;IAEA,OAAO,YAAY,MAAM,MAAM;QAAE,aAAa,EAAE;IAAC;AACnD","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/app/actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { answerFinancialQuestion } from '@/ai/flows/financial-question-answering';\r\nimport { generateSavingSuggestions, GenerateSavingSuggestionsInputSchema, GenerateSavingSuggestionsOutput } from '@/ai/flows/generate-saving-suggestions';\r\nimport { z } from 'zod';\r\n\r\n// Esquema para o histórico da conversa, precisa ser idêntico ao do fluxo\r\nconst messageSchema = z.object({\r\n  role: z.enum(['user', 'model']),\r\n  content: z.string(),\r\n});\r\n\r\n// O esquema de input para a nossa Server Action\r\nconst financialQuestionSchema = z.object({\r\n  question: z.string(),\r\n  history: z.array(messageSchema).optional(),\r\n});\r\n\r\n/**\r\n * Server Action para o chat financeiro.\r\n */\r\nexport async function handleFinancialQuestion(input: z.infer<typeof financialQuestionSchema>) {\r\n  const validatedInput = financialQuestionSchema.safeParse(input);\r\n\r\n  if (!validatedInput.success) {\r\n    throw new Error('Entrada inválida para a pergunta financeira.');\r\n  }\r\n\r\n  const result = await answerFinancialQuestion(validatedInput.data);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Server Action para gerar sugestões de economia.\r\n */\r\nexport async function handleGenerateSavingSuggestions(input: z.infer<typeof GenerateSavingSuggestionsInputSchema>): Promise<GenerateSavingSuggestionsOutput> {\r\n    const validatedInput = GenerateSavingSuggestionsInputSchema.safeParse(input);\r\n\r\n    if (!validatedInput.success) {\r\n        throw new Error('Entrada inválida para gerar sugestões de economia.');\r\n    }\r\n\r\n    const result = await generateSavingSuggestions(validatedInput.data);\r\n    return result;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;;;;;;;AAEA,yEAAyE;AACzE,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEA,gDAAgD;AAChD,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM;IAClB,SAAS,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ;AAC1C;AAKO,eAAe,wBAAwB,KAA8C;IAC1F,MAAM,iBAAiB,wBAAwB,SAAS,CAAC;IAEzD,IAAI,CAAC,eAAe,OAAO,EAAE;QAC3B,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,wJAAA,CAAA,0BAAuB,AAAD,EAAE,eAAe,IAAI;IAChE,OAAO;AACT;AAKO,eAAe,gCAAgC,KAA2D;IAC7G,MAAM,iBAAiB,uJAAA,CAAA,uCAAoC,CAAC,SAAS,CAAC;IAEtE,IAAI,CAAC,eAAe,OAAO,EAAE;QACzB,MAAM,IAAI,MAAM;IACpB;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,4BAAyB,AAAD,EAAE,eAAe,IAAI;IAClE,OAAO;AACX;;;IAvBsB;IAcA;;AAdA,+OAAA;AAcA,+OAAA","debugId":null}},
    {"offset": {"line": 466, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleGenerateSavingSuggestions as '40d8c39df7b0189880330ce1bfcb626d04ea590df5'} from 'ACTIONS_MODULE0'\nexport {handleFinancialQuestion as '40b68f8836293585b1da84d4dc4e753810a53daab2'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 521, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}