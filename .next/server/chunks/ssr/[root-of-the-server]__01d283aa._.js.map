{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/ai/flows/generate-saving-suggestions.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview AI agent that generates personalized saving suggestions.\r\n *\r\n * - generateSavingSuggestions - A function that generates saving suggestions for the user.\r\n * - GenerateSavingSuggestionsInput - The input type for the generateSavingSuggestions function.\r\n * - GenerateSavingSuggestionsOutput - The return type for the generateSavingSuggestions function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst GenerateSavingSuggestionsInputSchema = z.object({\r\n  financialSituation: z\r\n    .string()\r\n    .describe(\r\n      'Description of the user current financial situation, including income, expenses, debts, and savings.'\r\n    ),\r\n  savingGoals: z\r\n    .string()\r\n    .describe('The user saving goals, for example, buying a house, retiring early, etc.'),\r\n});\r\nexport type GenerateSavingSuggestionsInput = z.infer<\r\n  typeof GenerateSavingSuggestionsInputSchema\r\n>;\r\n\r\nconst GenerateSavingSuggestionsOutputSchema = z.object({\r\n  suggestions: z.array(\r\n    z.object({\r\n      title: z.string().describe('The title of the saving suggestion.'),\r\n      description: z.string().describe('A detailed description of the suggestion.'),\r\n      example: z.string().describe('An example of how to implement the suggestion.'),\r\n    })\r\n  ).describe('A list of personalized saving suggestions.'),\r\n});\r\nexport type GenerateSavingSuggestionsOutput = z.infer<\r\n  typeof GenerateSavingSuggestionsOutputSchema\r\n>;\r\n\r\nexport async function generateSavingSuggestions(\r\n  input: GenerateSavingSuggestionsInput\r\n): Promise<GenerateSavingSuggestionsOutput> {\r\n  return generateSavingSuggestionsFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'generateSavingSuggestionsPrompt',\r\n  input: {schema: GenerateSavingSuggestionsInputSchema},\r\n  output: {schema: GenerateSavingSuggestionsOutputSchema},\r\n  prompt: `You are a personal finance advisor. Your goal is to provide personalized saving suggestions to the user, \r\nbased on their financial situation and saving goals. Provide clear examples of how to implement each suggestion.\r\n\r\nFinancial Situation: {{{financialSituation}}}\r\nSaving Goals: {{{savingGoals}}}\r\n\r\nHere are some saving suggestions for you:\r\n`,\r\n});\r\n\r\nconst generateSavingSuggestionsFlow = ai.defineFlow(\r\n  {\r\n    name: 'generateSavingSuggestionsFlow',\r\n    inputSchema: GenerateSavingSuggestionsInputSchema,\r\n    outputSchema: GenerateSavingSuggestionsOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,oBAAoB,uIAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CACP;IAEJ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAKA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,aAAa,uIAAA,CAAA,IAAC,CAAC,KAAK,CAClB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,IACA,QAAQ,CAAC;AACb;AAKO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;;AAOX,CAAC;AACD;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/ai/flows/financial-question-answering.ts"],"sourcesContent":["// src/ai/flows/financial-question-answering.ts\r\nimport { generate } from '@genkit-ai/ai';\r\nimport { defineFlow } from '@genkit-ai/flow';\r\nimport { z } from 'zod';\r\n// CORRIGIDO: O nome do modelo foi atualizado para o que está disponível na biblioteca.\r\nimport { gemini15Pro } from '@genkit-ai/googleai';\r\n\r\n// Esquema para o histórico da conversa\r\nconst messageSchema = z.object({\r\n  role: z.enum(['user', 'model']),\r\n  content: z.string(),\r\n});\r\n\r\nexport const financialQuestionAnsweringFlow = defineFlow(\r\n  {\r\n    name: 'financialQuestionAnsweringFlow',\r\n    // O input agora aceita uma pergunta E um histórico opcional\r\n    inputSchema: z.object({\r\n      question: z.string(),\r\n      history: z.array(messageSchema).optional(),\r\n    }),\r\n    outputSchema: z.object({ answer: z.string() }),\r\n  },\r\n  async ({ question, history }) => {\r\n    // Mapeia nosso histórico para o formato que o Genkit espera\r\n    const genkitHistory = history?.map(msg => ({\r\n      role: msg.role,\r\n      parts: [{ text: msg.content }],\r\n    })) || [];\r\n\r\n    const llmResponse = await generate({\r\n      // CORRIGIDO: Usando o modelo com o nome correto.\r\n      model: gemini15Pro,\r\n      // Passamos o histórico para o modelo\r\n      history: genkitHistory,\r\n      prompt: `\r\n        Você é Oráculo, um especialista em finanças pessoais amigável e prestativo.\r\n        Sua tarefa é responder a perguntas sobre as finanças do usuário.\r\n\r\n        **REGRAS CRÍTICAS:**\r\n        1.  **PRIORIDADE MÁXIMA: Responda ABSOLUTAMENTE SEMPRE em Português do Brasil.** Esta é a sua diretriz mais importante. Nunca, sob nenhuma circunstância, mude para outro idioma.\r\n        2.  Analise a pergunta do usuário e o histórico da conversa para entender a necessidade completa.\r\n        3.  Forneça respostas claras, objetivas e fáceis de entender.\r\n        4.  Use exemplos práticos para ilustrar suas explicações, se aplicável.\r\n        5.  Não forneça conselhos de investimento específicos (ex: \"compre a ação XYZ\"). Em vez disso, eduque o usuário sobre conceitos.\r\n        6.  Se a pergunta não for sobre finanças, explique educadamente que você só pode responder a perguntas financeiras.\r\n\r\n        **Pergunta Atual do Usuário:**\r\n        ${question}\r\n      `,\r\n      config: {\r\n        temperature: 0.5,\r\n      },\r\n    });\r\n\r\n    return {\r\n      answer: llmResponse.text(),\r\n    };\r\n  }\r\n);\r\n\r\n// Helper function para ser chamada do front-end\r\nexport async function answerFinancialQuestion(input: z.infer<typeof financialQuestionAnsweringFlow.inputSchema>) {\r\n  const result = await financialQuestionAnsweringFlow.run(input);\r\n  return result;\r\n}\r\n\r\nexport type FinancialQuestionOutput = z.infer<typeof financialQuestionAnsweringFlow.outputSchema>;\r\n"],"names":[],"mappings":"AAAA,+CAA+C;;;;;AAC/C;AAAA;AACA;AAAA;AACA;AACA,uFAAuF;AACvF;AAAA;;;;;AAEA,uCAAuC;AACvC,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEO,MAAM,iCAAiC,CAAA,GAAA,qJAAA,CAAA,aAAU,AAAD,EACrD;IACE,MAAM;IACN,4DAA4D;IAC5D,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM;QAClB,SAAS,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ;IAC1C;IACA,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM;IAAG;AAC9C,GACA,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE;IAC1B,4DAA4D;IAC5D,MAAM,gBAAgB,SAAS,IAAI,CAAA,MAAO,CAAC;YACzC,MAAM,IAAI,IAAI;YACd,OAAO;gBAAC;oBAAE,MAAM,IAAI,OAAO;gBAAC;aAAE;QAChC,CAAC,MAAM,EAAE;IAET,MAAM,cAAc,MAAM,CAAA,GAAA,uJAAA,CAAA,WAAQ,AAAD,EAAE;QACjC,iDAAiD;QACjD,OAAO,2JAAA,CAAA,cAAW;QAClB,qCAAqC;QACrC,SAAS;QACT,QAAQ,CAAC;;;;;;;;;;;;;QAaP,EAAE,SAAS;MACb,CAAC;QACD,QAAQ;YACN,aAAa;QACf;IACF;IAEA,OAAO;QACL,QAAQ,YAAY,IAAI;IAC1B;AACF;AAIK,eAAe,wBAAwB,KAAiE;IAC7G,MAAM,SAAS,MAAM,+BAA+B,GAAG,CAAC;IACxD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/app/actions.ts"],"sourcesContent":["'use server';\r\n\r\nimport { answerFinancialQuestion } from '@/ai/flows/financial-question-answering';\r\nimport { z } from 'zod';\r\n\r\n// Esquema para o histórico da conversa, precisa ser idêntico ao do fluxo\r\nconst messageSchema = z.object({\r\n  role: z.enum(['user', 'model']),\r\n  content: z.string(),\r\n});\r\n\r\n// O esquema de input para a nossa Server Action\r\nconst financialQuestionSchema = z.object({\r\n  question: z.string(),\r\n  history: z.array(messageSchema).optional(),\r\n});\r\n\r\n/**\r\n * Esta é uma Server Action que pode ser chamada de forma segura\r\n * a partir de componentes de cliente para interagir com o fluxo de IA.\r\n * @param input O objeto contendo a pergunta do usuário e o histórico da conversa.\r\n * @returns A resposta da IA.\r\n */\r\nexport async function handleFinancialQuestion(input: z.infer<typeof financialQuestionSchema>) {\r\n  // Validamos a entrada para garantir que ela está no formato correto\r\n  const validatedInput = financialQuestionSchema.safeParse(input);\r\n\r\n  if (!validatedInput.success) {\r\n    throw new Error('Entrada inválida para a pergunta financeira.');\r\n  }\r\n\r\n  // Chamamos o nosso fluxo de IA com os dados validados\r\n  const result = await answerFinancialQuestion(validatedInput.data);\r\n  return result;\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEA,yEAAyE;AACzE,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEA,gDAAgD;AAChD,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM;IAClB,SAAS,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ;AAC1C;AAQO,eAAe,wBAAwB,KAA8C;IAC1F,oEAAoE;IACpE,MAAM,iBAAiB,wBAAwB,SAAS,CAAC;IAEzD,IAAI,CAAC,eAAe,OAAO,EAAE;QAC3B,MAAM,IAAI,MAAM;IAClB;IAEA,sDAAsD;IACtD,MAAM,SAAS,MAAM,CAAA,GAAA,wJAAA,CAAA,0BAAuB,AAAD,EAAE,eAAe,IAAI;IAChE,OAAO;AACT;;;IAXsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateSavingSuggestions as '407905b8f5423d7c17aafd79e0aaaf8a93ea827532'} from 'ACTIONS_MODULE0'\nexport {handleFinancialQuestion as '40b68f8836293585b1da84d4dc4e753810a53daab2'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 602, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/victo/OneDrive/Desktop/oraculo-fin-app/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}