{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-saving-suggestions.ts"],"sourcesContent":["// src/ai/flows/generate-saving-suggestions.ts\n'use server';\n\n/**\n * @fileOverview Agente de IA que gera sugestões de economia personalizadas.\n */\n\nimport { generate } from '@genkit-ai/ai';\nimport { z } from 'zod';\nimport { gemini15Pro } from '@genkit-ai/googleai';\n\n// Esquema de entrada para a geração de sugestões.\nconst GenerateSavingSuggestionsInputSchema = z.object({\n  financialSituation: z\n    .string()\n    .describe(\n      'Descrição da situação financeira atual do usuário (renda, despesas, etc.).'\n    ),\n  savingGoals: z\n    .string()\n    .describe('Os objetivos de economia do usuário (ex: comprar uma casa).'),\n});\nexport type GenerateSavingSuggestionsInput = z.infer<\n  typeof GenerateSavingSuggestionsInputSchema\n>;\n\n// Esquema de saída para as sugestões geradas.\nconst GenerateSavingSuggestionsOutputSchema = z.object({\n  suggestions: z.array(\n    z.object({\n      title: z.string().describe('O título da sugestão de economia.'),\n      description: z.string().describe('Uma descrição detalhada da sugestão.'),\n      example: z.string().describe('Um exemplo prático de como implementar a sugestão.'),\n    })\n  ).describe('Uma lista de sugestões de economia personalizadas.'),\n});\nexport type GenerateSavingSuggestionsOutput = z.infer<\n  typeof GenerateSavingSuggestionsOutputSchema\n>;\n\n/**\n * Gera sugestões de economia personalizadas com base na situação financeira do usuário.\n * @param input Objeto com a situação financeira e os objetivos do usuário.\n * @returns Uma lista de sugestões de economia.\n */\nexport async function generateSavingSuggestions(\n  input: GenerateSavingSuggestionsInput\n): Promise<GenerateSavingSuggestionsOutput> {\n\n  const llmResponse = await generate({\n    model: gemini15Pro,\n    prompt: `\n      Você é um consultor financeiro. Sua tarefa é fornecer sugestões de economia\n      personalizadas com base na situação financeira e metas do usuário.\n      Forneça exemplos claros para cada sugestão.\n      Responda sempre em Português do Brasil.\n\n      **Situação Financeira:** \n      ${input.financialSituation}\n\n      **Metas de Economia:** \n      ${input.savingGoals}\n\n      Aqui estão algumas sugestões de economia para você:\n    `,\n    output: {\n        schema: GenerateSavingSuggestionsOutputSchema,\n    },\n    config: {\n      temperature: 0.7,\n    },\n  });\n\n  return llmResponse.output()!;\n}\n"],"names":[],"mappings":"AAAA,8CAA8C;;;;;;AAG9C;;CAEC,GAED;AAAA;AACA;AACA;AAAA;;;;;;;AAEA,kDAAkD;AAClD,MAAM,uCAAuC,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,oBAAoB,kKAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CACP;IAEJ,aAAa,kKAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAKA,8CAA8C;AAC9C,MAAM,wCAAwC,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,aAAa,kKAAA,CAAA,IAAC,CAAC,KAAK,CAClB,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,aAAa,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC,SAAS,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,IACA,QAAQ,CAAC;AACb;AAUO,eAAe,0BACpB,KAAqC;IAGrC,MAAM,cAAc,MAAM,CAAA,GAAA,uJAAA,CAAA,WAAQ,AAAD,EAAE;QACjC,OAAO,2JAAA,CAAA,cAAW;QAClB,QAAQ,CAAC;;;;;;;MAOP,EAAE,MAAM,kBAAkB,CAAC;;;MAG3B,EAAE,MAAM,WAAW,CAAC;;;IAGtB,CAAC;QACD,QAAQ;YACJ,QAAQ;QACZ;QACA,QAAQ;YACN,aAAa;QACf;IACF;IAEA,OAAO,YAAY,MAAM;AAC3B;;;IA7BsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["// src/ai/genkit.ts\n// ATUALIZADO: A API do Genkit mudou. A importação principal agora vem de 'genkit'.\nimport { genkit } from 'genkit';\nimport { googleAI } from '@genkit-ai/googleai';\nimport { genkitEval } from '@genkit-ai/evaluator';\n\n// Log para confirmar que o arquivo está sendo executado.\nconsole.log('[Oraculo IA] Configurando o ambiente Genkit com a nova API...');\n\n// ATUALIZADO: A função 'configureGenkit' foi substituída por 'genkit'.\n// Esta chamada inicializa e configura os plugins para a aplicação.\ngenkit({\n  plugins: [\n    googleAI(),\n    genkitEval(),\n  ],\n  traceStore: {\n    provider: 'dev',\n  },\n  logLevel: 'debug',\n  enableTracingAndMetrics: true,\n});\n"],"names":[],"mappings":"AAAA,mBAAmB;AACnB,mFAAmF;;AACnF;AAAA;AACA;AAAA;AACA;AAAA;;;;AAEA,yDAAyD;AACzD,QAAQ,GAAG,CAAC;AAEZ,uEAAuE;AACvE,mEAAmE;AACnE,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACL,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;QACP,CAAA,GAAA,4KAAA,CAAA,aAAU,AAAD;KACV;IACD,YAAY;QACV,UAAU;IACZ;IACA,UAAU;IACV,yBAAyB;AAC3B","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/financial-question-answering.ts"],"sourcesContent":["// src/ai/flows/financial-question-answering.ts\nimport { generate } from '@genkit-ai/ai';\nimport { z } from 'zod';\nimport { gemini15Pro } from '@genkit-ai/googleai';\n\n// Esquema para o histórico da conversa.\nconst messageSchema = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\n\n// Esquema de input para a função.\nconst financialQuestionSchema = z.object({\n  question: z.string(),\n  history: z.array(messageSchema).optional(),\n  userEmail: z.string().optional(),\n});\n\n// Tipo de output esperado.\nexport type FinancialQuestionOutput = {\n  answer: string;\n};\n\n/**\n * Interage com a IA para responder a perguntas financeiras.\n * @param input Objeto com a pergunta e o histórico.\n * @returns A resposta da IA.\n */\nexport async function answerFinancialQuestion(\n  input: z.infer<typeof financialQuestionSchema>\n): Promise<FinancialQuestionOutput> {\n  // Mapeia o histórico para o formato do Genkit.\n  const genkitHistory =\n    input.history?.map((msg) => ({\n      role: msg.role,\n      parts: [{ text: msg.content }],\n    })) || [];\n\n  const llmResponse = await generate({\n    model: gemini15Pro,\n    history: genkitHistory,\n    prompt: `\n      Você é Oráculo, um especialista em finanças pessoais.\n      Sua tarefa é responder a perguntas sobre as finanças do usuário.\n      O usuário está logado com o e-mail: ${input.userEmail}.\n\n      **REGRAS:**\n      1.  Responda sempre em Português do Brasil.\n      2.  Seja claro e objetivo.\n      3.  Se a pergunta não for sobre finanças, recuse educadamente.\n\n      **Pergunta do Usuário:**\n      ${input.question}\n    `,\n    config: {\n      temperature: 0.5,\n    },\n  });\n\n  return {\n    answer: llmResponse.text(),\n  };\n}\n"],"names":[],"mappings":"AAAA,+CAA+C;;;;AAC/C;AAAA;AACA;AACA;AAAA;;;;AAEA,wCAAwC;AACxC,MAAM,gBAAgB,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,MAAM,kKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,kKAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEA,kCAAkC;AAClC,MAAM,0BAA0B,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,UAAU,kKAAA,CAAA,IAAC,CAAC,MAAM;IAClB,SAAS,kKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ;IACxC,WAAW,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAChC;AAYO,eAAe,wBACpB,KAA8C;IAE9C,+CAA+C;IAC/C,MAAM,gBACJ,MAAM,OAAO,EAAE,IAAI,CAAC,MAAQ,CAAC;YAC3B,MAAM,IAAI,IAAI;YACd,OAAO;gBAAC;oBAAE,MAAM,IAAI,OAAO;gBAAC;aAAE;QAChC,CAAC,MAAM,EAAE;IAEX,MAAM,cAAc,MAAM,CAAA,GAAA,uJAAA,CAAA,WAAQ,AAAD,EAAE;QACjC,OAAO,2JAAA,CAAA,cAAW;QAClB,SAAS;QACT,QAAQ,CAAC;;;0CAG6B,EAAE,MAAM,SAAS,CAAC;;;;;;;;MAQtD,EAAE,MAAM,QAAQ,CAAC;IACnB,CAAC;QACD,QAAQ;YACN,aAAa;QACf;IACF;IAEA,OAAO;QACL,QAAQ,YAAY,IAAI;IAC1B;AACF","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["// src/app/actions.ts\n'use server';\n\n// IMPORTANTE: Esta linha carrega a configuração do Genkit e inicializa a IA.\nimport '../ai/genkit';\n\nimport { answerFinancialQuestion } from '@/ai/flows/financial-question-answering';\nimport { z } from 'zod';\n\nconst messageSchema = z.object({\n  role: z.enum(['user', 'model']),\n  content: z.string(),\n});\n\nconst financialQuestionSchema = z.object({\n  question: z.string().min(1, 'A pergunta não pode estar vazia.'),\n  history: z.array(messageSchema).optional(),\n});\n\n/**\n * Server Action para lidar com perguntas financeiras do usuário.\n */\nexport async function handleFinancialQuestion(input: z.infer<typeof financialQuestionSchema>) {\n  const validatedInput = financialQuestionSchema.safeParse(input);\n\n  if (!validatedInput.success) {\n    console.error('Erro de validação:', validatedInput.error.flatten().fieldErrors);\n    throw new Error('Entrada inválida para a pergunta financeira.');\n  }\n\n  const result = await answerFinancialQuestion(validatedInput.data);\n  return result;\n}\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;;;AAGrB,6EAA6E;AAC7E;AAEA;AACA;;;;;;;AAEA,MAAM,gBAAgB,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,MAAM,kKAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,SAAS,kKAAA,CAAA,IAAC,CAAC,MAAM;AACnB;AAEA,MAAM,0BAA0B,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,UAAU,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,SAAS,kKAAA,CAAA,IAAC,CAAC,KAAK,CAAC,eAAe,QAAQ;AAC1C;AAKO,eAAe,wBAAwB,KAA8C;IAC1F,MAAM,iBAAiB,wBAAwB,SAAS,CAAC;IAEzD,IAAI,CAAC,eAAe,OAAO,EAAE;QAC3B,QAAQ,KAAK,CAAC,sBAAsB,eAAe,KAAK,CAAC,OAAO,GAAG,WAAW;QAC9E,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,wJAAA,CAAA,0BAAuB,AAAD,EAAE,eAAe,IAAI;IAChE,OAAO;AACT;;;IAVsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateSavingSuggestions as '40d2045dc61279a5cffe8c02c2e2a3ec08707deb89'} from 'ACTIONS_MODULE0'\nexport {handleFinancialQuestion as '40e6ac5a7a200f765d5603cd5e82f0864a074f6f28'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 488, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}